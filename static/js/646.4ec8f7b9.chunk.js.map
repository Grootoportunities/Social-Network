{"version":3,"file":"static/js/646.4ec8f7b9.chunk.js","mappings":"8NAKaA,EAAiC,SAACC,GAC7C,IAAQC,EAAaD,EAAbC,KAAMC,EAAOF,EAAPE,GAEd,OAAO,SAAC,KAAD,CAASC,GAAI,aAAeD,EAA5B,SAAiCD,KCH7BG,EAAkC,SAACJ,GAC9C,IAAQK,EAAYL,EAAZK,QAER,OAAO,0BAAOA,K,6BCoCHC,EAAI,CACfC,SAzCeC,EAAAA,GAAAA,QAAH,+NAMVC,EAAAA,EAMAC,EAAAA,GA8BFC,QAzBcH,EAAAA,GAAAA,IAAH,mFA0BXI,gBApBsBJ,EAAAA,GAAAA,IAAH,mFAqBnBK,UAfgBL,EAAAA,GAAAA,IAAH,wCAgBbM,cAZoBN,EAAAA,GAAAA,IAAH,6G,sHCjCNO,EAAuB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASjB,GAAY,YAC3DkB,EAAiBD,EAAKE,SAAWF,EAAKG,MAE5C,OACE,SAACC,EAAA,EAAD,CAAaJ,KAAMA,EAAMG,MAAOF,EAAhC,UACE,SAAC,EAAAZ,EAAA,aAAD,0BAAmBU,GAAWhB,GAA9B,IAAqCoB,MAAOF,QCM5CI,GAAYC,EAAAA,EAAAA,GAAiB,IAgBtBC,GAAmBC,EAAAA,EAAAA,GAA2B,CAAEC,KAAM,WAAnCD,EAdkC,SAACzB,GACjE,OACE,UAAC2B,EAAD,CAAaC,SAAU5B,EAAM6B,aAA7B,WACE,SAACC,EAAA,EAAD,CACEC,YAAa,UACb9B,KAAM,UACN+B,UAAWjB,EACXkB,SAAU,CAACC,EAAAA,EAAUZ,MAEvB,SAACa,EAAA,EAAD,CAAQC,KAAM,SAAd,wBASAT,EAAcnB,EAAAA,GAAAA,KAAH,gF,6BCZjB,GAAe6B,EAAAA,EAAAA,IACbC,EAAAA,GACAC,EAAAA,EAAAA,KATsB,SAACC,GAAD,MAAgD,CACtEA,MAAOA,EAAMC,iBAEY,SAACC,GAAD,MAAiD,CAC1EC,YAAa,SAACC,GAAD,OAA0BF,GAASG,EAAAA,EAAAA,GAAaD,SAG/D,ECNiD,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,MAAOG,EAAkB,EAAlBA,YACnDG,EAAgBN,EAAMO,QAAQC,KAAI,SAACC,GAAD,OACtC,UAACvC,EAAA,EAAD,CAAwBwC,WAAY,SAApC,WACE,SAAC5C,EAAEO,UAAH,CAAasC,IAAKC,KAClB,SAACrD,EAAD,CAAmBG,GAAI+C,EAAE/C,GAAID,KAAMgD,EAAEhD,MAAxBgD,EAAE/C,MAFC+C,EAAE/C,OAMhBmD,EAAiBb,EAAMc,SAASN,KAAI,SAACO,GAAD,OACxC,UAAC7C,EAAA,EAAD,CAAwB8C,IAAK,OAAQN,WAAY,SAAjD,WACE,SAAC9C,EAAD,CAASC,QAASkD,EAAElD,WACpB,SAAC,KAAD,CACEoD,KAAI,oBAAeF,EAAErD,IACrBwD,OAAQ,kBAAM,SAACpD,EAAEQ,cAAH,SAJAyC,EAAErD,OAYtB,OACE,UAACI,EAAEC,SAAH,YACE,UAACE,EAAA,EAAD,YACE,SAACH,EAAEK,QAAH,UAAYmC,KACZ,SAACxC,EAAEM,gBAAH,UAAoByC,QAEtB,SAAC7B,EAAD,CAAkBI,SATA,SAAC+B,GAAD,OACpBhB,EAAYgB,EAAStD","sources":["pages/messages/dialog/Dialog.tsx","pages/messages/message/Message.tsx","pages/messages/Messages_Styles.ts","components/FormsControls/MessageArea/MessageArea.tsx","pages/messages/messageForm/MessageForm.tsx","pages/messages/MessagesContainer.tsx","pages/messages/Messages.tsx"],"sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\ntype DialogsProps = { name: string; id: number };\n\nexport const Dialog: React.FC<DialogsProps> = (props) => {\n  const { name, id } = props;\n\n  return <NavLink to={\"/messages/\" + id}>{name}</NavLink>;\n};\n","import React from \"react\";\n\ntype MessageProps = {\n  message: string;\n};\nexport const Message: React.FC<MessageProps> = (props) => {\n  const { message } = props;\n\n  return <span>{message}</span>;\n};\n","import styled from \"styled-components\";\nimport { Container } from \"../../components/Container/Container\";\nimport { FlexWrapper } from \"../../components/FlexWrapper/FlexWrapper\";\n\nconst Messages = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n\n  ${Container} {\n    display: flex;\n    justify-content: center;\n    gap: 100px;\n  }\n\n  ${FlexWrapper} {\n    width: 100%;\n  }\n`;\n\nconst Dialogs = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nconst DialogsMessages = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nconst DialogAva = styled.img`\n  width: 40px;\n`;\n\nconst ActiveMessage = styled.div`\n  background-color: black;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n`;\n\nexport const S = {\n  Messages,\n  Dialogs,\n  DialogsMessages,\n  DialogAva,\n  ActiveMessage,\n};\n","import { FC } from \"react\";\nimport { S } from \"../_styles\";\nimport { FormControl } from \"../FormControl\";\n\nexport const MessageArea: FC<any> = ({ input, meta, ...props }) => {\n  const errorCondition = meta.touched && meta.error;\n\n  return (\n    <FormControl meta={meta} error={errorCondition}>\n      <S.MessageArea {...input} {...props} error={errorCondition} />\n    </FormControl>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport styled from \"styled-components\";\nimport { Button } from \"../../../components/Button/Button\";\nimport {\n  maxLengthCreator,\n  required,\n} from \"../../../utils/validators/validators\";\n\nimport { MessageArea } from \"../../../components/FormsControls/MessageArea/MessageArea\";\n\nexport type MessageFormData = {\n  message: string;\n};\n\nconst maxLength = maxLengthCreator(30);\n\nconst StyledMessageForm: FC<InjectedFormProps<MessageFormData>> = (props) => {\n  return (\n    <MessageForm onSubmit={props.handleSubmit}>\n      <Field\n        placeholder={\"Message\"}\n        name={\"message\"}\n        component={MessageArea}\n        validate={[required, maxLength]}\n      />\n      <Button type={\"submit\"}>Send</Button>\n    </MessageForm>\n  );\n};\n\nexport const ReduxMessageForm = reduxForm<MessageFormData>({ form: \"message\" })(\n  StyledMessageForm,\n);\n\nconst MessageForm = styled.form`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n","import {\n  addMessageAC,\n  MessagesPageType,\n} from \"../../redux/reducers/messagesReducer\";\nimport { Messages } from \"./Messages\";\nimport { connect } from \"react-redux\";\nimport { RootStateType } from \"../../redux/redux-store\";\nimport { compose, Dispatch } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { ComponentType } from \"react\";\n\ntype MapStateToPropsType = { state: MessagesPageType };\ntype MapDispatchToPropsType = {\n  sendMessage: (messageValue: string) => void;\n};\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\n  state: state.messagesPage,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => ({\n  sendMessage: (messageValue: string) => dispatch(addMessageAC(messageValue)),\n});\n\nexport default compose<ComponentType>(\n  withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps),\n)(Messages);\n","import React from \"react\";\nimport { Container } from \"../../components/Container/Container\";\nimport { Dialog } from \"./dialog/Dialog\";\nimport { Message } from \"./message/Message\";\nimport { S } from \"./Messages_Styles\";\nimport dialogAva from \"../../assets/3906412.png\";\nimport { FlexWrapper } from \"../../components/FlexWrapper/FlexWrapper\";\nimport { Route } from \"react-router-dom\";\nimport { MessagesPageType } from \"../../redux/reducers/messagesReducer\";\nimport { MessageFormData, ReduxMessageForm } from \"./messageForm/MessageForm\";\n\ntype MessagesProps = {\n  state: MessagesPageType;\n\n  sendMessage: (messageValue: string) => void;\n};\n\nexport const Messages: React.FC<MessagesProps> = ({ state, sendMessage }) => {\n  const mappedDialogs = state.dialogs.map((d) => (\n    <FlexWrapper key={d.id} alignItems={\"center\"}>\n      <S.DialogAva src={dialogAva} />\n      <Dialog key={d.id} id={d.id} name={d.name} />\n    </FlexWrapper>\n  ));\n\n  const mappedMessages = state.messages.map((m) => (\n    <FlexWrapper key={m.id} gap={\"10px\"} alignItems={\"center\"}>\n      <Message message={m.message} />\n      <Route\n        path={`/messages/${m.id}`}\n        render={() => <S.ActiveMessage></S.ActiveMessage>}\n      />\n    </FlexWrapper>\n  ));\n\n  const onSendMessage = (formData: MessageFormData) =>\n    sendMessage(formData.message);\n\n  return (\n    <S.Messages>\n      <Container>\n        <S.Dialogs>{mappedDialogs}</S.Dialogs>\n        <S.DialogsMessages>{mappedMessages}</S.DialogsMessages>\n      </Container>\n      <ReduxMessageForm onSubmit={onSendMessage} />\n    </S.Messages>\n  );\n};\n"],"names":["Dialog","props","name","id","to","Message","message","S","Messages","styled","Container","FlexWrapper","Dialogs","DialogsMessages","DialogAva","ActiveMessage","MessageArea","input","meta","errorCondition","touched","error","FormControl","maxLength","maxLengthCreator","ReduxMessageForm","reduxForm","form","MessageForm","onSubmit","handleSubmit","Field","placeholder","component","validate","required","Button","type","compose","withAuthRedirect","connect","state","messagesPage","dispatch","sendMessage","messageValue","addMessageAC","mappedDialogs","dialogs","map","d","alignItems","src","dialogAva","mappedMessages","messages","m","gap","path","render","formData"],"sourceRoot":""}